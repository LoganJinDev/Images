#!/bin/bash

# 等待时间 设置默认值
: "${SLEEP_TIME:=1}"
: "${TIME_OUT:=300}"
TOTAL_WAIT=0

# kaniko配置文件路径
KANIKO_CONFIG_PATH=${KANIKO_CONFIG_PATH:-"/kaniko/.docker"}
# docker配置文件路径
DOCKER_CONFIG_PATH=${DOCKER_CONFIG_PATH:-"$HOME/.docker"}

# 判断环境变量是否设置
if [ -n "$LOCAL_IMAGE" ] && [ -n "$REMOTE_IMAGE" ]; then

  # 等待生成镜像文件
  #while [ ! -f "$LOCAL_IMAGE" ] && [ $TOTAL_WAIT -lt $TIME_OUT ]; do
  while [ $TOTAL_WAIT -lt $TIME_OUT ] && ([ ! -f "$LOCAL_IMAGE" ] || [ ! -s "$LOCAL_IMAGE" ] || ! tar -tf "$LOCAL_IMAGE" >/dev/null 2>&1); do
    echo "Wait for the $LOCAL_IMAGE file to be generated..."
    sleep $SLEEP_TIME
    TOTAL_WAIT=$((TOTAL_WAIT + SLEEP_TIME))
  done

  # 检查kaniko配置目录是否存在
  if [ -d "$KANIKO_CONFIG_PATH" ]; then
      # 若存在则拷贝kaniko配置文件到docker配置文件目录
      cp -r "$KANIKO_CONFIG_PATH" "$DOCKER_CONFIG_PATH"
      echo "Copy $KANIKO_CONFIG_PATH to $DOCKER_CONFIG_PATH successfully."
  fi

  # 判断镜像文件是否存在
  if [ -f "$LOCAL_IMAGE" ]; then
    # 检查 skopeo 命令是否存在
    if command -v skopeo >/dev/null 2>&1 || which skopeo >/dev/null 2>&1; then
        echo "The skopeo copy command starts..."
        #skopeo copy docker-archive:$LOCAL_IMAGE docker://$REMOTE_IMAGE --tls-verify=false
        # --tls-verify=false已弃用 改为 --src-tls-verify=false --dest-tls-verify=false
        skopeo copy docker-archive:$LOCAL_IMAGE docker://$REMOTE_IMAGE --src-tls-verify=false --dest-tls-verify=false
        if [ $? -eq 0 ]; then
          echo "$REMOTE_IMAGE has been pushed to the remote repository successfully."
        else
          echo "$REMOTE_IMAGE Failed to be pushed to the remote repository."
        fi
    else
        echo "The skopeo command is not installed. Install skopeo and try again."
    fi
  else
    echo "After waiting for ${TIME_OUT} seconds, no $LOCAL_IMAGE file is generated. Exit the program."
  fi
#else
#  echo "No environment variable is set for LOCAL_IMAGE or REMOTE_IMAGE."
fi
